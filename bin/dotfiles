#!/bin/bash

FILE_NAME=${0##*/}
CURRENT_OS=$(uname -s)
PWD=$(pwd)

# General colors
black='\x1B[0;30m'
red='\x1B[0;31m'
green='\x1B[0;32m' # '\e[1;32m' is too bright for white bg.
blue='\x1B[1;34m'
yellow='\x1B[0;33m'
purple='\x1B[1;35m'
cyan='\x1B[0;36m'
endColor='\x1B[0m'

# Type of messages
__info__="${blue}Info${endColor}"
__warning__="${yellow}Warning!${endColor}"
__error__="${red}Error!!!${endColor}"
__done__="${green}✔ Done${endColor}"

# Current file variables
__version__="2.0.1"
PROJECT_NAME="The Egel dotfiles"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"  #current path to file
PROJECT_CONFIG_NAME='.dotfiles.config'
PROJECT_CONFIG_FILE=$HOME/${PROJECT_CONFIG_NAME}
PROJECT_CONFIG_MISSING_VARIABLE_COUNTER=0
PROJECT_INSTALL_DEFAULTS=
DATE_UTC=$(date +%Y-%m-%dT%TZ)
AUTHOR="Maciej Sypień"

# Current (active) symlinks binding dotfile
CURRENT_SYMLINKS=(
  "$HOME/.aliases"
  "$HOME/.conkyrc"
  "$HOME/.dircolors"
  "$HOME/.editorconfig"
  "$HOME/.gitconfig"
  "$HOME/.gvimrc"
  "$HOME/.muttrc"
  "$HOME/.muttrc.local"
  "$HOME/.tmux.conf"
  "$HOME/.tmux.conf.local"
  "$HOME/.vim"
  "$HOME/.vimrc"
  "$HOME/.vimrc.local"
  "$HOME/.zshrc"
  "$HOME/.zshrc.local"
  "$HOME/.zshrc.local"
)

# Old (inactive) symlinks which were bind file/paths to dotfiles
OLD_SYMLINKS=(
  "$HOME/.aliases\(*"
  "$HOME/.conkyrc\(*"
  "$HOME/.dircolors\(*"
  "$HOME/.editorconfig\(*"
  "$HOME/.gitconfig\(*"
  "$HOME/.gvimrc\(*"
  "$HOME/.muttrc.local\(*"
  "$HOME/.muttrc\(*"
  "$HOME/.tmux.conf.local\(*"
  "$HOME/.tmux.conf\(*"
  "$HOME/.vim\(*"
  "$HOME/.vimrc.local\(*"
  "$HOME/.vimrc\(*"
  "$HOME/.zshrc.local\(*"
  "$HOME/.zshrc.local\(*"
  "$HOME/.zshrc\(*"
)

print_version() {
  echo -e "v${__version__}"
}

print_section() {
  _section=$1
  echo -e "\n${cyan}=== ${_section}${endColor}"
}

print_subsection() {
  _subsection=$1
  echo -e "\n${purple}--- ${_subsection}${endColor}"
}

print_if_missing_variable() {
  _variable=$1
  _if_string_exsist=`grep -F "$_variable" $PROJECT_CONFIG_FILE | wc -l`
  if [[ "$_if_string_exsist" -eq 0 ]]; then
    echo -e "${__info__} Add ${yellow}${_variable}${endColor} variable to your $PROJECT_CONFIG_FILE file."
    PROJECT_CONFIG_MISSING_VARIABLE_COUNTER=$((PROJECT_CONFIG_MISSING_VARIABLE_COUNTER + 1))
  fi
}

do_copy_default_config_file() {
  print_subsection "Copy default config file"
  cp -fv ${DIR}/${PROJECT_CONFIG_NAME} ${PROJECT_CONFIG_FILE} && echo -e "${__done__}"
}

do_set_config_vars() {
  # set some vars based on validate config
  PROJECT_REPOSITORY_DIR="${GIT_PROJECT_FOLDER_DIR}/${GIT_PROJECT_FOLDER_NAME}"
  PROJECT_LIB_DIR="$PROJECT_REPOSITORY_DIR/lib"
  PROJECT_SETTINGS_COMMON_DIR="$PROJECT_REPOSITORY_DIR/settings/common"
  PROJECT_SETTINGS_THEME_DIR="$PROJECT_REPOSITORY_DIR/settings/themes/$DOTFILES_THEME"
  PROJECT_CONFIGURATOR_FILE="$PROJECT_REPOSITORY_DIR/bin/$FILE_NAME"
}

# Load config variables for the project
if [ -f $PROJECT_CONFIG_FILE ]; then
  source $PROJECT_CONFIG_FILE

  print_if_missing_variable "GIT_PROJECT_FOLDER_NAME"
  print_if_missing_variable "GIT_PROJECT_FOLDER_DIR"
  print_if_missing_variable "DOTFILES_THEME"

  if [[ "$PROJECT_CONFIG_MISSING_VARIABLE_COUNTER" -gt 0 ]]; then
    exit 1
  fi

  do_set_config_vars
else
  case $1 in
    install)
      # empty because we want to pass it only for installation process.
      # The installation process contains creating default config
      ;;
    *)
      echo -e "${__warning__} Missing $PROJECT_CONFIG_FILE file."
      echo -ne "${__info__}"
      read -r -p " Do you want to copy default configuration file to fix it? (y/N) " _copy_default_configuration
      case $_copy_default_configuration in
        y|Y)
          do_copy_default_config_file
          ;;
        *)
          ;;
      esac
      exit 1
      ;;
  esac
fi

# do befor install (yes to all while install)
if [ "$2" == "-y" ]; then # if second arg is -y then
  echo "Install all with defaults"
  PROJECT_INSTALL_DEFAULTS=1
fi

print_dotfiles_logo() {
  cat ${PROJECT_REPOSITORY_DIR}/bin/.project_logo
}

# Remove all old symlinks for dotfiles
remove_old_symlinks() {
  for item in "${OLD_SYMLINKS[@]}"
  do
    rm -rfv $item
  done
}

# Remove current symlinks for dotfiles
remove_current_symlinks() {
  for item in "${CURRENT_SYMLINKS[@]}"
  do
    rm -rfv $item
  done
}


# Methods
check_program() {
  _name=$1
  _command=$2
  echo -en "${purple}${_name}${endColor}" 1>&2;
  eval ${_command}
}

# Making simlint to file/folder
make_symlink() {
  __name=$1
  __if=$2 # input file (~/.dotfiles/.vimrc)
  __of=$3 # output file (~/.vimrc)


  echo -e "${purple}$__name${endColor}"

  # it is not a file
  if ! [ -f $__of ]; then
    echo -e " > it is not a file or file doesn't exist"
  else
    mv "$__of" "$__of($(date))"
    echo -en " > file exist, so safely renaming it as $__of($(date))"
    echo -e " ${__done__}"
  fi

  # it is not a directory
  if ! [ -d $__of ]; then
    echo -e " > it is not a directory or directory doesn't exist"
  else
    mv "$__of" "$__of($(date))"
    echo -en " > directory exist, so safely renaming it as $__of($(date))"
    echo -e " ${__done__}"
  fi

  # it is a symbolic link
  if ! [ -L $__of ]; then
    echo -en " > it is not a symlink then create it"
    ln -s $__if $__of
    echo -e " ${__done__}"
  else
    echo -e " > it is symlink, so it should ok"
  fi
}

is_program_installed() {
  _program=$1
  _install_script=$2

  if hash ${_program} 2>/dev/null; then
    echo -e "${__done__} Program ${blue}${_program}${endColor} already exist at `which ${_program}`"
  else
    echo -e "Installing ${blue}${_program}${endColor} program... Please wait."
    eval ${_install_script}
    echo -e ${__done__}
  fi;
}

create_secure_mutt_passwords() {
  print_subsection "Creating secure passwords for mutt with GPG"
  echo -e "${__info__} Below is your list of gpg:"
  if [ -z "$(gpg --list-keys)" ]; then
    echo "${__warning__} You have no GPG keys. Generate your pair 'gpg --gen-key' or import, then rerun: '${FILE_NAME} -mmp' to restart of creating secure passwords for mutt"
  else
    gpg --list-keys
  fi;
  echo ""
  read -r -p "Type your gmail address (that you are using in gpg; ex: 'john.doe@gmail.com'): " _gmail_address
  read -s -p "Type your gmail password: " _gmail_password

  _passwords_path="$HOME/.mutt/passwords"
  mkdir -vp $HOME/.mutt && echo -e ${__done__}

  if [ -f "${_passwords_path}" ]; then
    shred ${_passwords_path}
    rm -rf ${_passwords_path}
  fi

  #creating temp password file
  echo "set imap_pass = ${_gmail_password}" >> ${_passwords_path}
  echo "set smtp_pass = ${_gmail_password}" >> ${_passwords_path}
  gpg -r $_gmail_address -e ${_passwords_path} && echo -e "${__done__} Created GPG passwords file"

  if [ -f "${_passwords_path}.gpg" ]; then
    shred ${_passwords_path}
    rm -rf ${_passwords_path}
    echo -e "${__done__} Successfully complete creating a secure passwords file for mutt"
  fi
}

do_help() {
  print_dotfiles_logo
  echo -e "The Egel's dotfiles sophisticated configurator.\n" 1>&2;
  echo -e "OPTIONS" 1>&2;
  echo -e "    backup"
  echo -e "        Create backup from files given into BACKUP_FILES variable\n\tlocated into ${PROJECT_CONFIG_FILE} file.\n" 1>&2;
  echo -e "    clean, -c"
  echo -e "        Clean old installation symlinks for current user home\n\tdirectory ($HOME).\n" 1>&2;
  echo -e "    clean-all, -ca"
  echo -e "        Clean all installation symlinks for current user home\n\tdirectory ($HOME).\n" 1>&2;
  echo -e "    install"
  echo -e "        Install and configure dotfiles for current user.\n" 1>&2;
  echo -e "    list-config, -lc"
  echo -e "        List personal configuration file stored in\n\t${PROJECT_CONFIG_FILE} for current user.\n" 1>&2;
  echo -e "    make-mutt-password, -mmp"
  echo -e "        Creating a secure (gpg) password file for mutt configuration.\n" 1>&2;
  echo -e "    reconfigure, -r"
  echo -e "        Reconfigure ${PROJECT_NAME} symlinks for current user\n\tand fix permissions for fragile files and directories.\n" 1>&2;
  echo -e "    update, -u"
  echo -e "        Update ${PROJECT_NAME} repository and it submodules.\n" 1>&2;
  echo -e "    uninstall"
  echo -e "        Uninstall ${PROJECT_NAME} from hard drive.\n" 1>&2;
  echo -e "    -h, --help"
  echo -e "        Show help.\n" 1>&2;
  echo -e "    --version"
  echo -e "        Print the version of ${PROJECT_NAME}.\n" 1>&2;
  echo -e "LOCAL CONFIG FILE" 1>&2;
  echo -e "    ${PROJECT_CONFIG_FILE}\n" 1>&2;
  echo -e "EXAMPLES OF USAGE" 1>&2;
  echo -e "    Since ${FILE_NAME} is installed globally you can do:" 1>&2;
  echo -e "        ${FILE_NAME} --help" 1>&2;
  echo -e "        ${FILE_NAME} install" 1>&2;
  echo -e "\n2014-$(date +%Y) ${AUTHOR} - License MIT." 1>&2;
  echo -e "Further info at https://github.com/egel/dotfiles" 1>&2;
  exit 1;
}

do_update() {
  print_section "Updating ${PROJECT_NAME}"
  if ! [[ -d "${PROJECT_REPOSITORY_DIR}" ]]
    then
      echo -e "${__info__} ${PROJECT_NAME} doesn't exist at ${blue}${PROJECT_REPOSITORY_DIR}${endColor}. Perhaps you want to install it first?"
      exit 1;
  else
    echo -ne "${purple}Switching ${PROJECT_NAME} to master branch (force)${endColor}\t"
    git --git-dir=${PROJECT_REPOSITORY_DIR}/.git --work-tree=${PROJECT_REPOSITORY_DIR} checkout -f master && echo -e "${__done__}"

    echo -ne "${purple}Updating ${PROJECT_NAME} repository:${endColor}\t\t\t"
    git --git-dir=${PROJECT_REPOSITORY_DIR}/.git --work-tree=${PROJECT_REPOSITORY_DIR} pull

    echo -ne "${purple}Updating ${PROJECT_NAME} submodules repositories:${endColor}\t"
    git --git-dir=${PROJECT_REPOSITORY_DIR}/.git submodule foreach git pull && echo -e "${__done__}"

    echo -ne "${purple}Switching ${PROJECT_NAME} submodules to master:${endColor}\t"
    git --git-dir=${PROJECT_REPOSITORY_DIR}/.git submodule foreach git checkout -f master && echo -e "${__done__}"
    exit 1;
  fi
}

do_install() {
  print_section "Installing ${PROJECT_NAME}"

  if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
    echo -e "Ask for few questions which will automatize your setup to adjust your configuration preferences."
    echo -ne "${__info__}"
    read -r -p " Do you want to configure mutt with secured gpg password? (y/N) " _configure_secure_mutt_gpg
  else
    _configure_secure_mutt_gpg="n"
  fi

  # ask only if config exsist and user run install again
  if [ -f $PROJECT_CONFIG_FILE ]; then
    echo -ne "${__info__} You already have dotfiles config file at $PROJECT_CONFIG_FILE\n"
    if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
      read -r -p "Do you want to copy default configuration file to override the old one? (y/N) " _copy_default_configuration
    else
      _copy_default_configuration="n"
    fi

    # creating default config if set
    case $_copy_default_configuration in
      y|Y)
        do_copy_default_config_file
        . $PROJECT_CONFIG_FILE    # include/import config variables from file
        do_set_config_vars        # recreate project vars on proper config paths
        ;;
      *)
        ;;
    esac
  else
    # force create default config file
    do_copy_default_config_file
    . $PROJECT_CONFIG_FILE    # include/import config variables from file
    do_set_config_vars        # recreate project vars on proper config paths
  fi

  # update dotfiles repository
  ${PROJECT_CONFIGURATOR_FILE} update

  # symlink dotfiles program (same for Darwin and Linux)
  print_subsection "Symlinking dotfiles configurator program"
  mkdir -p /usr/local/bin
  sudo ln -vsf $PROJECT_CONFIGURATOR_FILE /usr/local/bin

  case $CURRENT_OS in
    Darwin)
      print_subsection "Installing brew - Mac OSX package manager"
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

      print_subsection "Installing required programs"
      brew install wget
      brew install curl
      brew install zsh
      brew install tmux
      brew install vim
      ;;

    Linux)
      print_subsection "Installing required software for further steps"
      sudo apt-get install -y software-properties-common

      print_subsection "Checking and adding PPA repositories"
      echo -e "Git PPA" && sudo add-apt-repository -y ppa:git-core/ppa
      echo -e "Tmux PPA" && sudo add-apt-repository -y ppa:pi-rho/dev

      print_subsection "Updating and installing required programs"
      sudo apt-get update
      sudo apt-get install -y python-software-properties software-properties-common curl wget vim git zsh tmux xdg-utils fontconfig build-essential libssl-dev
      sudo apt-get install -y editorconfig
      ;;
  esac

  # vim
  check_program "vim:\t" "vim --version | head -n1"

  # tmux
  check_program "tmux:\t" "tmux -V"

  # git
  check_program "git:\t" "git --version"

  # zsh
  print_subsection "Changing default shell to ZSH"
  sudo chsh -s $(which zsh) && echo -e "${__done__}"

  print_subsection "Restore privacy for Ubuntu"
  wget -q -O - https://fixubuntu.com/fixubuntu.sh | bash && echo -e "${__done__}"

  print_subsection "Downloading submodules of ${PROJECT_NAME} repository"
  git submodule update --init --recursive
  echo -e ${__done__}

  # oh-my-zsh
  print_subsection "Installing oh-my-zsh"
  wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh

  # link honukai to oh-my-zsh themes
  print_subsection "Symlink honukai to oh-my-zsh themes"
  make_symlink "honukai.zsh-theme" "${PROJECT_LIB_DIR}/honukai-iterm-zsh/honukai.zsh-theme" "$HOME/.oh-my-zsh/themes/honukai.zsh-theme"

  # call program reconfigure option
  ${PROJECT_CONFIGURATOR_FILE} reconfigure

  print_subsection "Installing NeoBundle - Vim plugin manager"
  curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh && echo -e "${__done__}"

  print_subsection "Installing Hack font"
  case $CURRENT_OS in
    Linux)
      sudo apt-get install fonts-hack-ttf
      ;;
    Darwin)
      brew cask install caskroom/fonts/font-hack
      ;;
  esac
  echo -e "${__info__} To see more details for Hack font at http://sourcefoundry.org/hack/"

  # installing vim plugins (need to be after reconfiguration process of dotfiles configurator)
  print_subsection "Installing NeoBundle vim plugins"
  eval $HOME/.vim/bundle/neobundle.vim/bin/neoinstall

  # creating secure passwords file for mutt
  case $_configure_secure_mutt_gpg in
    y|Y)
      create_secure_mutt_passwords
      ;;
    *)
      ;;
  esac

  case $CURRENT_OS in
    Darwin)
      print_subsection "Updating brew manager"
      echo -e "${__info__} Be patient, it may take a while ;)"
      echo -e "${__info__} brew doctor ..."
      brew doctor
      echo -e "${__info__} brew update ..."
      brew update
      ;;
  esac

  echo -e "\n\n${green}Congratulations!${endColor}"
  echo -e "Configuration of ${PROJECT_NAME} complete successfully."
  echo -e "Now you could run: '${FILE_NAME} --help' to find more about configurator."

  echo -e "\n${__info__} To finalize installation of ZSH shell, you need to reboot the system."
  if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
    echo -ne "${__info__}"
    read -r -p " Would you like to do it now? (y/N) " _reboot_now
  else
    _reboot_now="n"
  fi

  if [[ $_reboot_now =~ ^([yY]) ]]; then
    echo -e "${__info__} Now rebooting the system..."
    sudo reboot
  else
    echo -e "${__info__} Rebooting canceled by User"
  fi
}

do_fix_permissions() {
  # According to http://superuser.com/q/215504/250469
  print_section "Fix permissions for fragile files and directories"
  print_subsection "Fix $HOME directory"
  chmod -v go-w $HOME && echo -e ${__done__}

  SSH_DIR="$HOME/.ssh"
  print_subsection "Fix SSH directory (default: ${SSH_DIR})"
  chmod -v 700 ${SSH_DIR} && echo -e ${__done__}
  chown -v $USER ${SSH_DIR} && echo -e ${__done__}
  chmod -v 640 ${SSH_DIR}/authorized_keys
  chmod -v 644 ${SSH_DIR}/*.pub
  chmod -v 600 ${SSH_DIR}/id_rsa

  chmod -v 644 ${HOME}/.aliases.private && echo -e ${__done__}
  chmod -v 640 ${HOME}/.envpass.private && echo -e ${__done__}
}

do_uninstall() {
  print_section "Uninstall ${PROJECT_NAME}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to uninstall ${PROJECT_NAME}? (y/N) " _uninstall_repo
  case $_uninstall_repo in
    y|Y)
      if [[ -d "$PROJECT_REPOSITORY_DIR" && "$PROJECT_REPOSITORY_DIR" == ^. ]]; then
        rm $PROJECT_REPOSITORY_DIR -rf
      fi
      echo -e ${__done__}
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting unistalling of ${PROJECT_NAME}."
      ;;
  esac
}


do_reconfigure() {
  print_section "Reconfigure ${PROJECT_NAME}"
  echo -e "${__info__} Based on" ${PROJECT_CONFIG_FILE}
  #make_symlink ".aliases" "${PROJECT_SETTINGS_COMMON_DIR}.aliases" "$HOME/.aliases"
  make_symlink ".dircolors" "${PROJECT_LIB_DIR}/dircolors-solarized/dircolors.256dark" "$HOME/.dircolors"
  make_symlink ".editorconfig" "${PROJECT_SETTINGS_COMMON_DIR}/.editorconfig" "$HOME/.editorconfig"
  make_symlink ".gitconfig" "${PROJECT_SETTINGS_COMMON_DIR}/.gitconfig" "$HOME/.gitconfig"
  make_symlink ".gvimrc" "${PROJECT_SETTINGS_COMMON_DIR}/.gvimrc" "$HOME/.gvimrc"
  make_symlink ".muttrc" "${PROJECT_SETTINGS_COMMON_DIR}/.muttrc" "$HOME/.muttrc"
  make_symlink ".muttrc.local" "${PROJECT_SETTINGS_THEME_DIR}/.muttrc.local" "$HOME/.muttrc.local"
  make_symlink ".tmux.conf" "${PROJECT_SETTINGS_COMMON_DIR}/.tmux.conf" "$HOME/.tmux.conf"
  make_symlink ".vim" "${PROJECT_SETTINGS_COMMON_DIR}/.vim" "$HOME/.vim"
  make_symlink ".vimrc" "${PROJECT_SETTINGS_COMMON_DIR}/.vimrc" "$HOME/.vimrc"
  make_symlink ".zshrc" "${PROJECT_SETTINGS_COMMON_DIR}/.zshrc" "$HOME/.zshrc"

  case $DOTFILES_THEME in
    desktop)
      make_symlink ".conkyrc" "${PROJECT_LIB_DIR}/conky-themes/conky_seamod/.conkyrc" "$HOME/.conkyrc" # only for desktops (servers terminals not need GUI)
      make_symlink ".tmux.conf.local" "${PROJECT_SETTINGS_THEME_DIR}/.tmux.conf.local" "$HOME/.tmux.conf.local"
      make_symlink ".vimrc.local" "${PROJECT_SETTINGS_THEME_DIR}/.vimrc.local" "$HOME/.vimrc.local"
      make_symlink ".zshrc.local" "${PROJECT_SETTINGS_THEME_DIR}/.zshrc.local" "$HOME/.zshrc.local"
      ;;
    server)
      make_symlink ".tmux.conf.local" "${PROJECT_SETTINGS_THEME_DIR}/.tmux.conf.local" "$HOME/.tmux.conf.local"
      make_symlink ".vimrc.local" "${PROJECT_SETTINGS_THEME_DIR}/.vimrc.local" "$HOME/.vimrc.local"
      make_symlink ".zshrc.local" "${PROJECT_SETTINGS_THEME_DIR}/.zshrc.local" "$HOME/.zshrc.local"
      ;;
  esac

  echo -e "\n${yellow}Checking NeoBundle:${endColor}"
  wget https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh -q -O - | bash

  # fixing the permissions
  do_fix_permissions
}

do_clean() {
  print_section "Clean ${PROJECT_NAME}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to clean old ${PROJECT_NAME} symlinks? (y/N) " _cleaning_symlinks
  case $_cleaning_symlinks in
    y|Y)
      echo -e "Removing previous/old symlinks of ${PROJECT_NAME}"
      remove_old_symlinks
      echo -e "${__done__}"
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting cleaning of ${PROJECT_NAME} symlinks."
      ;;
  esac
}

do_clean_all() {
  print_section "Clean ${PROJECT_NAME}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to clean ALL ${PROJECT_NAME} symlinks? (y/N) " _cleaning_symlinks
  case $_cleaning_symlinks in
    y|Y)
      echo -e "Removing all symlinks of ${PROJECT_NAME}"
      remove_old_symlinks
      remove_current_symlinks
      echo -e "${__done__}"
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting cleaning of ${PROJECT_NAME} symlinks."
      ;;
  esac
}

do_list_local_config() {
  cat ${PROJECT_CONFIG_FILE}
}

do_backup() {
  print_section "Making backup of your private files"

  if [ ${#BACKUP_FILES[@]} -eq 0 ]; then
    echo -e "${__warning__} There is no backup files set yet. Add BACKUP_FILES to ${PROJECT_CONFIG_FILE}"
    exit 1;
  fi

  echo -ne "${__info__}"
  BACKUP_DIR="${BACKUP_DIR}(${DATE_UTC})" # UTC but local
  read -r -p " Write backup directory (default: '${BACKUP_DIR}') " _backup_dir
  if [ -n "${_backup_dir}" ]; then # if not empty
    BACKUP_DIR=${_backup_dir}
  fi

  mkdir -p ${BACKUP_DIR}
  for item in "${BACKUP_FILES[@]}"
  do
    if [ -L ${item} ]; then # symlinks
      cp -L $item $BACKUP_DIR
    elif [ -d ${item} ]; then # directory
      cp -R -f $item $BACKUP_DIR
    elif [ -f ${item} ]; then # file
      cp -f $item $BACKUP_DIR
    fi
    echo -e "Backup of $item completed ${__done__}"
  done

}

# Main
case "$1" in
  clean|-c)
    do_clean
    ;;
  clean-all|-ca)
    do_clean_all
    ;;
  --help|-h)
    do_help
    ;;
  list-config|-lc)
    do_list_local_config
    ;;
  install|-i)
    do_install
    ;;
  reconfigure|-r)
    do_reconfigure
    ;;
  make-mutt-password|-mmp)
    create_secure_mutt_passwords
    ;;
  uninstall)
    do_uninstall
    ;;
  update|-u)
    do_update
    ;;
  backup)
    do_backup
    ;;
  --version)
    print_version
    ;;
  *)
    echo -e "Nothing happened \xe2\x98\xba\nRun: '${FILE_NAME} --help' to print help menu." 1>&2;
    exit 1
    ;;
esac

shift $((OPTIND - 1))

