" vim: ft=vim fdm=marker ts=2 sts=2 sw=2

    Plug 'SirVer/ultisnips' "{{{
     " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
     let g:UltiSnipsExpandTrigger="<tab>" " default <tab>
     let g:UltiSnipsJumpForwardTrigger="<tab>" " default: <c-b>
     let g:UltiSnipsJumpBackwardTrigger="<S-tab>" " default: <c-z>

     " Prevent UltiSnips from removing our carefully-crafted mappings
     let g:UltiSnipsMappingsToIgnore = ['autocomplete']

     " If you want :UltiSnipsEdit to split your window.
     let g:UltiSnipsEditSplit="vertical"

    }}}
    Plug 'honza/vim-snippets'

    if count(s:settings.plugin_groups, 'javascript') "{{{
      NeoBundleLazy 'marijnh/tern_for_vim', {
          \ 'autoload': { 'filetypes': ['javascript'] },
          \ 'build': {
            \ 'mac': 'npm install',
            \ 'unix': 'npm install',
            \ 'cygwin': 'npm install',
            \ 'windows': 'npm install',
          \ },
        \ }

    "}}}

    Plug 'embear/vim-localvimrc' "{{{
      let g:localvimrc_reverse = 0
      let g:localvimrc_name = ['.lvimrc', '.vimrc_local' ]
      let g:localvimrc_ask = 0 " do not ask to load local vimrc
      let g:localvimrc_event = [ "BufEnter", "WinEnter", "TabEnter" ]
      let g:localvimrc_debug = 0

      " Helper method for .lvimrc files to finish
      fun! MyLocalVimrcAlreadySourced(...)
        " let sfile = expand(a:sfile)
        let sfile = g:localvimrc_script
        let guard_key = expand(sfile).'_'.getftime(sfile)
        if exists('b:local_vimrc_sourced')
          if type(b:local_vimrc_sourced) != type({})
            echomsg "warning: b:local_vimrc_sourced is not a dict!"
            let b:local_vimrc_sourced = {}
          endif
          if has_key(b:local_vimrc_sourced, guard_key)
            return 1
          endif
        else
          let b:local_vimrc_sourced = {}
        endif
        let b:local_vimrc_sourced[guard_key] = 1
        return 0
      endfun

    " }}}

    " Plug 'edkolev/tmuxline.vim' " {{{
      " let g:tmuxline_preset = {
        " \ 'a' : '#S',
        " \ 'b' : '#W',
        " \ 'c' : ['#H', "uptime #(uptime| cut -d' ' -f4-|cut -d, -f1)"],
        " \ 'x' : '#(date)',
        " \ 'y' : '#W',
        " \ 'z' : ['#(whoami)', '#H']
        " \ }

    " " }}}

  NeoBundleLazy 'derekwyatt/vim-scala', {'autoload':{'filetypes':['scala']}} "{{{ python syntax + integration

  " }}}
  Plug 'edthedev/pelican.vim'
  Plug 'ashisha/image.vim'               " preview images
  NeoBundle 'jamessan/vim-gnupg'
  NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}} "{{{
    autocmd BufRead,BufNewFile *.coffee setfiletype coffee
  "}}}

  try
    so
  catch
    echo "You do not have local vim theme file. Check dotfiles README for further info."
  endtry

  NeoBundle 'vim-latex/vim-latex ' " {{{
    " IMPORTANT: win32 users will need to have 'shellslash' set so that latex
    " can be called correctly.
    if has("gui_running")
      if has("gui_win32")
        set shellslash
      endif
    endif

    " IMPORTANT: grep will sometimes skip displaying the file name if you
    " search in a singe file. This will confuse Latex-Suite. Set your grep
    " program to alway generate a file-name.
    set grepprg=grep\ -nH\ $*

    " TIP: if you write your \label's as \label{fig:something}, then if you
    " type in \ref{fig: and press <C-n> you will automatically cycle through
    " all the figure labels. Very useful!
    autocmd FileType tex set iskeyword+=:

    let g:tex_flavor='latex' " Set latex flavor for code highlighting
    let g:Tex_DefaultTargetFormat = 'pdf'
    let g:Tex_MultipleCompileFormats = 'pdf, aux'

    " Now \e will load the pdf viewer to the page containing the nearest label to
    " the current cursor position (assuming the default backslash for the LocalLeader key).
    " This works well on multi-file projects since the aux file is searched to
    " find the pdf name. So you can jump around in Vim using its wonderful tools,
    " then tell the pdf viewer to jump to the same page.
    nnoremap <buffer> <LocalLeader>e :call EvinceNearestLabel()<CR>

    autocmd BufRead,BufNewFile *.tex setlocal formatoptions+=w textwidth=120

  " }}}

  NeoBundle 'edkolev/tmuxline.vim' " {{{
    let g:tmuxline_preset = {
      \ 'a' : '#S',
      \ 'b' : '#W',
      \ 'c' : ['#H', "uptime #(uptime| cut -d' ' -f4-|cut -d, -f1)"],
      \ 'x' : '#(date)',
      \ 'y' : '#W',
      \ 'z' : ['#(whoami)', '#H']
      \ }

  " }}}
