#!/bin/bash

# General colors
black='\e[0;30m'
red='\e[0;31m'
green='\e[0;32m' # '\e[1;32m' is too bright for white bg.
blue='\e[1;34m'
yellow='\e[0;33m'
purple='\e[1;35m'
cyan='\e[0;36m'
endColor='\e[0m'

# global vars
_name="The Egel dotfiles"
_repo_name='.dotfiles'
_repo_dir="$HOME/${_repo_name}/"
_common_dir="$HOME/${_repo_name}/common/"
_egel="${_repo_dir}/setup/egel"

# Messages
__info__="${blue}Info!${endColor}"
__warning__="${yellow}Warning!${endColor}"
__error__="${red}Error!${endColor}"
__done__="${green}✔ Done${endColor}"


_dotfiles_config_name='.dotfiles.config'
_dotfiles_config_local="$HOME/${_dotfiles_config_name}"
_dotfiles_config_repo="${_repo_dir}${_dotfiles_config_name}"
if [ -f $_dotfiles_config_local ]; then
  source $_dotfiles_config_local

  # set some vars based on config
  _dotfiles_type_repository_dir="${_repo_dir}$DOTFILES_TYPE/"
  #echo ${_dotfiles_type_repository_dir}
else
  echo -e ${__error__} "Missing" $_dotfiles_config_local "file."
  echo 'INFO: To fix this run `cp '${_dotfiles_config_repo}' '$HOME'` and adjust copied config file to your needs.'
  exit 1
fi


# Methods
check_program() {
  __name=$1
  __command=$2
  echo -en "${purple} ${__name} ${endColor}" 1>&2;
  ${__command}
}

make_symlink() {
  __name=$1
  __if=$2 # input file (~/.dotfiles/.vimrc)
  __of=$3 # output file (~/.vimrc)


  echo -e "${purple}$__name${endColor}"

  # it is not a file
  if [ ! -f $__of ]; then
    echo -e " > it is not a file or file doesn't exsist"
  else
    mv "$__of" "$__of($(date))"
    echo -en " > file exist, so safely renaming it as $__of($(date))"
    echo -e " ${__done__}"
  fi

  # it is not a directory
  if [ ! -d $__of ]; then
    echo -e " > it is not a directory or directory doesn't exsist"
  else
    mv "$__of" "$__of($(date))"
    echo -en " > directory exist, so safely renaming it as $__of($(date))"
    echo -e " ${__done__}"
  fi

  # it is a symbolic link
  if [ ! -L $__of ]; then
    echo -en " > it is not a symlink then create it"
    ln -s $__if $__of
    echo -e " ${__done__}"
  else
    echo -e " > it is symlink, so it should ok"
  fi
}

do_help() {
  echo -e "The Egel's dotfiles sophisticated configurator.\n" 1>&2;
  echo -e "  OPTIONS" 1>&2;
  echo -e "    -c, --clean\t\tClean old installation symlinks for current \n\t\t\t  user home directory ($HOME)." 1>&2;
  echo -e "    -ca, --clean-all\tClean all installation symlinks for current \n\t\t\t  user home directory ($HOME)." 1>&2;
  echo -e "    -h, --help\t\tShow help." 1>&2;
  echo -e "    -i, --install\tInstall and configure egel dotfiles for\n\t\t\t  current user." 1>&2;
  echo -e "    -lc, --list-config\tList personal configuration file stored in\n\t\t\t  ${_dotfiles_config_local} for current user." 1>&2;
  echo -e "    -r, --reconfigure\tReconfigure ${_name} symlinks for\n\t\t\t  current user." 1>&2;
  echo -e "    -u, --update\tUpdate ${_name}." 1>&2;
  echo -e "    -U, --uninstall\tUninstall ${_name} from hard drive.i\n" 1>&2;
  echo -e "  LOCAL CONFIG FILE" 1>&2;
  echo -e "    ${_dotfiles_config_local}" 1>&2;
  echo -e "\n  EXAMPLES OF USAGE" 1>&2;
  echo -e "    $0 --help" 1>&2;
  echo -e "    $0 --install" 1>&2;
  echo -e "\n2014 License MIT --- Further info at https://github.com/egel/dotfiles" 2>&2;
  exit 1;
}

do_update() {
  echo -e "${cyan}=== Updating ${_name}${endColor}"
  if [[ ! -d "${_repo_dir}" && "${_repo_dir}" == ^. ]]
    then
      echo -e "${__info__} ${_name} doesn't exisit at ${blue}${_repo_dir}${endColor}. Perhaps you want to install it first?"
      exit 1;
  else
    cd ${_repo_dir}
    git submodule foreach git checkout master
    git submodule foreach git pull
    echo -e "${green}✔ Done${endColor}"
    exit 1;
  fi
}

do_install() {
  echo -e "${cyan}=== Installing ${_name}${endColor}"
  ${_egel} --update

  echo -e "${purple}--- Checking and adding PPA repositories${endColor}"
  sudo add-apt-repository -y ppa:git-core/ppa # Git
  sudo add-apt-repository -y ppa:chris-lea/node.js #NodeJS
  sudo add-apt-repository -y ppa:pi-rho/dev # Tmux

  echo -e "${purple}--- Checking and install required programs (zsh, oh-my-zsh, git, tmux, nodejs, python common, xdg-utils)${endColor}"
  sudo apt-get update
  sudo apt-get install -y python-software-properties software-properties-common git zsh tmux nodejs xdg-utils

  # tmux
  check_program "tmux:" "tmux -V"

  # git
  check_program "git:" "git --version"

  # nodejs + npm
  sudo chown -R `whoami` ~/.npm
  check_program "node:" "node --version"
  check_program "npm:" "npm --version"

  # zsh
  chsh -s /bin/zsh
  echo -e "${purple}Default shell has been changed to ZSH${endColor} ${__done__}"

  # oh-my-zsh
  wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh

  echo -e "${purple}--- Restore privacy for Ubuntu${endColor}"
  wget -q -O - https://fixubuntu.com/fixubuntu.sh | bash
  echo -e "${__done__}"

  echo -e "${purple}--- Installing: NeoBundle${endColor}"
  curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh

  echo -e "${purple}--- Installing: Powerline fonts${endColor}"
  git clone git@github.com:Lokaltog/powerline-fonts.git ~/powerline-fonts
  ~/powerline-fonts/install.sh
  rm ~/powerline-fonts/ -rf
  wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf -P ~/
  wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf -P ~/
  mkdir -p ~/.local/share/fonts/ ~/.config/fontconfig/conf.d/
  mv -f ~/PowerlineSymbols.otf ~/.local/share/fonts/
  mv -f ~/10-powerline-symbols.conf ~/.config/fontconfig/conf.d/
  rm ~/PowerlineSymbols.otf ~/10-powerline-symbols.conf
  fc-cache -vf
  echo -e ${__done__}

  echo -e "${__info__} To see more details for powerline installation look at https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation"


  echo -e "${purple}--- Downloading repository submodules${endColor}"
  git submodule update --init --recursive
  echo -e ${__done__}

  # reconfigure
  ${_egel} --reconfigure


  echo -e "${__info__} To finalize installation of ZSH shell, you need to reboot the system."
  read -r -p "Would you like to do it now? (Y/n) " _reboot_now
  if [[ $_reboot_now =~ ^([Y]) ]]; then
    echo -e "${__info__} Reboot the system..."
    sudo reboot
  else
    echo -e "${__info__} Rebooting canceled by User"
  fi

  echo -e "${green}✔ Congratulations. Configuration of ${_name} complete successfully :)${endColor}"
}


do_uninstall() {
  echo -e "${cyan}=== Uninstall ${_name}${endColor}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to uninstall ${_name}? (Y/n) " _uninstall_repo
  case $_uninstall_repo in
    Y)
      if [[ -d "$_repo_dir" && "$_repo_dir" == ^. ]]
        then
          rm $_repo_dir -rf
      fi
      echo -e ${__done__}
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting unistalling of ${_name}."
      ;;
  esac
}


do_reconfigure() {
  echo -e "${cyan}=== Reconfigure ${_name}${endColor}"
  echo -e "${__info__} Based on" ${_dotfiles_config_local}
  #make_symlink ".aliases" "${_common_dir}.aliases" "$HOME/.aliases"
  make_symlink ".vim" "${_common_dir}.vim" "$HOME/.vim"
  make_symlink ".gitconfig" "${_common_dir}.gitconfig" "$HOME/.gitconfig"
  make_symlink ".dircolors" "${_repo_dir}dircolors-solarized/dircolors.256dark" "$HOME/.dircolors"
  make_symlink ".vimrc" "${_common_dir}.vimrc" "$HOME/.vimrc"
  make_symlink ".zshrc" "${_common_dir}.zshrc" "$HOME/.zshrc"
  make_symlink ".tmux.conf" "${_common_dir}.tmux.conf" "$HOME/.tmux.conf"

  case $DOTFILES_TYPE in
    desktop)
      make_symlink ".zshrc.local" "${_dotfiles_type_repository_dir}.zshrc.local" "$HOME/.zshrc.local"
      make_symlink ".tmux.conf.local" "${_dotfiles_type_repository_dir}.tmux.conf.local" "$HOME/.tmux.conf.local"
      make_symlink ".conkyrc" "${_repo_dir}conky-themes/conky_seamod/.conkyrc" "$HOME/.conkyrc" # only for desktops
      ;;
    server)
      make_symlink ".zshrc.local" "${_dotfiles_type_repository_dir}.zshrc.local" "$HOME/.zshrc.local"
      make_symlink ".tmux.conf.local" "${_dotfiles_type_repository_dir}.tmux.conf.local" "$HOME/.tmux.conf.local"
      ;;
  esac
}

do_clean() {
  echo -e "${cyan}=== Clean ${_name}${endColor}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to clean old ${_name} symlinks? (Y/n) " _cleaning_symlinks
  case $_cleaning_symlinks in
    Y)
      echo -e "Removing previous/old symlinks of ${_name}"
      rm -v $HOME/.vim\(* $HOME/.vimrc\(* $HOME/.gitconfig\(* $HOME/.zshrc\(* $HOME/.conkyrc\(* $HOME/.tmux.conf\(* $HOME/.dircolors\(* $HOME/.aliases\(* $HOME/.zshrc.local\(*
      echo -e "${__done__}"
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting cleaning of ${_name} symlinks."
      ;;
  esac
}

do_clean_all() {
  echo -e "${cyan}=== Clean ${_name}${endColor}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to clean ALL ${_name} symlinks? (Y/n) " _cleaning_symlinks
  case $_cleaning_symlinks in
    Y)
      echo -e "Removing all symlinks of ${_name}"
      rm -v $HOME/.vim\(* $HOME/.vim $HOME/.vimrc\(* $HOME/.vimrc $HOME/.gitconfig\(* $HOME/.gitconfig $HOME/.zshrc\(* $HOME/.zshrc $HOME/.conkyrc\(* $HOME/.conkyrc $HOME/.tmux.conf\(* $HOME/.tmux.conf  $HOME/.dircolors\(* $HOME/.dircolors $HOME/.aliases\(* $HOME/.aliases $HOME/.zshrc.local\(* $HOME/.zshrc.local $HOME/.tmux.conf.local\(* $HOME/.tmux.conf.local
      echo -e "${__done__}"
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting cleaning of ${_name} symlinks."
      ;;
  esac
}

do_list_local_config() {
  cat ${_dotfiles_config_local}
}

# Main
case "$1" in
  --install|-i)
    do_install
    ;;
  --uninstall|-U)
    do_uninstall
    ;;
  --update|-u)
    do_update
    ;;
  --reconfigure|-r)
    do_reconfigure
    ;;
  --clean|-c)
    do_clean
    ;;
  --clean-all|-ca)
    do_clean_all
    ;;
  --list-config|-lc)
    do_list_local_config
    ;;
  *|--help|-h)
    do_help
    ;;
esac

shift $((OPTIND - 1))
