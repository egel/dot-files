#!/bin/bash

# General colors
black='\e[0;30m'
red='\e[0;31m'
green='\e[0;32m' # '\e[1;32m' is too bright for white bg.
blue='\e[1;34m'
yellow='\e[0;33m'
purple='\e[0;35m'
cyan='\e[0;36m'
endColor='\e[0m'


# global vars
_name="The Egel dotfiles"
_repo_name=".dotfiles"
_repo_dir="~/${_repo_name}/"
_egel="${_repo_dir}setup/egel"

# Messages
__info__="${blue}Info!${endColor} "
__warning__="${yellow}Warning!${endColor} "
__error__="${red}Error!${endColor} "
__done__="${green}✔ Done${endColor}"


# Methods
check_program() {
  __name=$1
  __command=$2
  echo -en "${purple} ${__name} ${endColor}" 1>&2;
  ${__command}

}

do_help() {
  echo -e "The Egel's dotfiles sophisticated configurator.\n" 1>&2;
  echo -e "  Usage: " 1>&2;
  echo -e "    $0 -c/--clean\t\tClean old installation symlinks for current \n\t\t\t\t\t  user home directory ($HOME)." 1>&2;
  echo -e "    $0 -h/--help\t\tShow help." 1>&2;
  echo -e "    $0 -i/--install\t\tInstall and configure egel dotfiles for\n\t\t\t\t\t  for current user." 1>&2;
  echo -e "    $0 -r/--reconfigure\tReconfigure ${_name} symlinks for\n\t\t\t\t\t  current user." 1>&2;
  echo -e "    $0 -u/--update\t\tUpdate ${_name}." 1>&2;
  echo -e "    $0 -U/--uninstall\t\tUninstall ${_name} from hard drive." 1>&2;
  echo -e "\n2014 License MIT --- Further info at https://github.com/egel/dotfiles." 2>&2;
  exit 1;
}

do_update() {
  echo -e "${purple}=== Updating ${_name}${endColor}"
  if [ ! -d "$_repo_dir" ]; then
    echo -e "${__info__}${_name} doesn't exisit at ${blue}${_repo_dir}${endColor}. Perhaps you want to install it first?"
    exit 1;
  fi
  cd ~/${_repo_name}/
  git submodule foreach git checkout master
  git submodule foreach git pull
  echo -e "${green}✔ Done${endColor}"
}

do_install() {
  echo -e "${purple}=== Installing ${_name}${endColor}"
  $_egel --update

  echo -e "${yellow}--- Checking and adding PPA repositories${endColor}"
  sudo add-apt-repository -y ppa:git-core/ppa # Git
  sudo add-apt-repository -y ppa:chris-lea/node.js #NodeJS
  sudo add-apt-repository -y ppa:pi-rho/dev # Tmux

  echo -e "${yellow}--- Checking and install required programs (zsh, git, tmux, nodejs, python common, xdg-utils)${endColor}"
  sudo apt-get update
  sudo apt-get install -y python-software-properties software-properties-common git zsh tmux nodejs xdg-utils

  # tmux
  check_program "tmux:" "tmux -V"

  # git
  check_program "git:" "git --version"

  # nodejs + npm
  sudo chown -R `whoami` ~/.npm
  check_program "node:" "node --version"
  check_program "npm:" "npm --version"

  # zsh
  chsh -s /bin/zsh
  echo -en "${purple}Default shell has beed changed to ZSH${endColor}"
  echo -e "${__done__}"


  echo -e "${purple}--- Restore privacy for Ubuntu${endColor}"
  wget -q -O - https://fixubuntu.com/fixubuntu.sh | bash
  echo -e "${__done__}"

  echo -e "${yellow}--- Installing: NeoBundle${endColor}"
  curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh

  echo -e "${purple}--- Installing: Powerline fonts${endColor}"
  git clone git@github.com:Lokaltog/powerline-fonts.git ~/powerline-fonts
  ~/powerline-fonts/install.sh
  rm ~/powerline-fonts/ -rf
  wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf -P ~/
  wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf -P ~/
  mkdir -p ~/.local/share/fonts/ ~/.config/fontconfig/conf.d/
  mv -f ~/PowerlineSymbols.otf ~/.local/share/fonts/
  mv -f ~/10-powerline-symbols.conf ~/.config/fontconfig/conf.d/
  rm ~/PowerlineSymbols.otf ~/10-powerline-symbols.conf
  fc-cache -vf
  echo -e ${__done__}

  echo -e "${__info__}To see more details for powerline installation look at https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation"


  echo -e "${purple}--- Downloading repository submodules${endColor}"
  git submodule update --init --recursive
  echo -e ${__done__}

  echo -e "${purple}=== Reconfigure  repository files${endColor}"
  $_egel --reconfigure


  echo -e "${red}--- To finalize installation of ZSH shell, you need to reboot the system.\nWould you like to do it now? (Y/n)${endColor}"
  read reboot_now

  if [ $reboot_now -eq "Y" ]
    then
      sudo reboot
  fi

  echo -e "${green}Configuration complete :)${endColor}"
}


do_uninstall() {
  echo -e "${purple}=== Uninstall ${_name}${endColor}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to uninstall ${_name}? (Y/n) " _uninstall_repo
  case $_uninstall_repo in
    Y)
      if [ -d "$_repo_dir" ]; then
        rm $_repo_dir -rf
      fi
      echo -e ${__done__}
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting unistalling of ${_name}."
      ;;
  esac
}


do_reconfigure() {
  echo -e "${purple}=== Reconfigure ${_name}${endColor}"
  ${_repo_dir}setup/configure_files.py
}

do_clean() {
  echo -e "${purple}=== Clean ${_name}${endColor}"
  echo -ne "${__warning__}"
  read -r -p " Are you sure you want to clean ${_name} old symlinks? (Y/n) " _cleaning_symlinks
  case $_cleaning_symlinks in
    Y)
      echo -e "Removing previous/old symlinks of ${_name}"
      rm -v ~/.vim\(* ~/.vimrc\(* ~/.gitconfig\(* ~/.zshrc\(* ~/.conkyrc\(* ~/.tmux.conf\(*
      echo -e "${__done__}"
      exit 1;
      ;;
    *)
      echo -e "${__info__} Aborting cleaning of ${_name}."
      ;;
  esac
}


# Main
case "$1" in
  --install|-i)
    do_install
    ;;
  --uninstall|-U)
    do_uninstall
    ;;
  --update|-u)
    do_update
    ;;
  --reconfigure|-r)
    do_reconfigure
    ;;
  --clean|-c)
    do_clean
    ;;
  *|--help|-h)
    do_help
    ;;
esac

shift $((OPTIND - 1))
